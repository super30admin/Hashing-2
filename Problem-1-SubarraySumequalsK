//Time Complexity - O(n)
//space Complexity - O(n)
class Solution {
    public int subarraySum(int[] nums, int k) {
        int ans = 0, rsum = 0;
        HashMap<Integer,Integer> map = new HashMap<>();
        map.put(0, 1);
        for(int i = 0 ; i < nums.length ; i++)
        {
            rsum = rsum + nums[i];
            if(map.containsKey(rsum - k))
            {
                ans = ans + map.get(rsum - k);
            }
            if(map.containsKey(rsum))
            {
                map.put(rsum , map.get(rsum) + 1);
            }
            else
            {
                map.put(rsum , 1);
            }
        }
        return ans;
        
    }
}
