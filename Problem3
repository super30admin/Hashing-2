//Time complexity - o(N)
// Space complexity - o(log N)






class Solution {
    public int longestPalindrome(String s) {
        // String S is split into a list of chars and then we count the frequency of each char
        int[] count = new int[128];
        for(char c: s.toCharArray())
            count[c]++;
        
        int ans = 0;
        //We insert every pair of same chars into the palindrome and also add a central char as soon as possible
        for (int var: count){
            ans += var/2 * 2; // formula
            if (ans % 2 == 0 && var % 2 == 1)
                ans++;
        }
        
        return ans;
        
    }
}

