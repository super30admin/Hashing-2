class Solution {
    public int findMaxLength(int[] nums) {
        //init --> max, currSum, hashmap 
        //1.for each element calculate curr sum
        //if curr sum exists in hm than check the difference end-start
        //else add new line with start index
        
        //init
        int max=0; int currSum=0;
        HashMap<Integer,Integer> map = new HashMap<>();
        map.put(0,-1);//o is currsum and -1 is start index
        
        for(int i=0;i<nums.length;i++){
            if(nums[i]==1) currSum-=1;
            if(nums[i]==0) currSum+=1;
            if(map.containsKey(currSum)){
                 int length = i-map.get(currSum);
                 max = Math.max(max,length);
            }
            else{
                map.put(currSum,i);
            }
        }
        return max;
    }
}

//time complexity : O(n) num of index we iterate
//space complexity : O(n) hasmap storing 
//ran succesfully on leetcode
//HashMap Approach
