
// Time Complexity : O(n)
// Space Complexity :O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this :No


// Your code here along with comments explaining your approach

class Solution {
    public int subarraySum(int[] nums, int k) {
        if(nums == null || nums.length == 0)
            return 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        int count =0;
        int RunningSum =0;
        
        map.put(RunningSum,1);
        
        for(int i =0;i<nums.length; i++)
        {
            RunningSum = RunningSum+ nums[i];
            if(map.containsKey(RunningSum -k))
            {
                count =count+ map.get(RunningSum -k);
                
            }
            map.put(RunningSum,map.getOrDefault(RunningSum,0)+1);
        }
        return count;
    }
}
