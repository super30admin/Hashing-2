// Time Complexity : check below
// Space Complexity :check below
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

Solution 1-

Two pass hashmap - TC - O(n) SC - O(1)
public int longestPalindrome(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        
        for(char c: s.toCharArray())
        {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
                    
        int result = 0; 
        boolean oddAvail = false;
        
        for(Integer count : map.values())
        {
            if(count % 2 == 0)
            {
                result += count;
            }
            else
            {
                oddAvail = true;
                result += count - 1;
            }
        }
        
        return oddAvail ? result + 1 : result;
    }
    


Solution 2
One pass Hashset - TC - O(n) SC - O(1)
public int longestPalindrome(String s) {
        HashSet<Character> set = new HashSet<>();
        int result = 0;
        
        for(char c: s.toCharArray())
        {
            if(set.contains(c))
            {
                result += 2;
                set.remove(c);
            }
            else
            {
                set.add(c);
            }
        }
        return set.isEmpty() ? result: result + 1;
    }
