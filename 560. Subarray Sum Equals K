//Time Complexity : O(N)
//Space Complexity : O(N)
class Solution {
    public int subarraySum(int[] nums, int k) {
        HashMap<Integer,Integer> map = new HashMap<>();
        map.put(0,1);
        int rSum = 0;
        int result = 0;
        for(int i=0; i<nums.length; i++){
            //calculating running sum
            rSum+=nums[i];
            if(map.containsKey(rSum - k)) {
                //add to result
                result += map.get(rSum - k);
            }
             if(!map.containsKey(rSum)) {
                 map.put(rSum,0);
             }
            map.put(rSum, map.getOrDefault(rSum , 0) + 1);
        }
        return result;
    }
}
