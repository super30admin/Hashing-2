    public int findMaxLength(int[] nums) {
        //edge case
        if(nums == null || nums.length == 0)
            return 0;
        // logic
        HashMap<Integer, Integer> map = new HashMap<>();
        int rsum  = 0 , max = 0;
        map.put(0,-1); // for the case[0,1]
        for(int i = 0; i < nums.length ; i++){
            rsum = nums[i] == 0 ? rsum-1 :rsum+1;
            if(map.containsKey(rsum)){
                max = Math.max(max, i - map.get(rsum));
            }else{
                map.put(rsum,i);
            }
        }
        return max;
    }
    // Time complexity : O(N) because we have to traverse entire array
    // Space Complexity : O (N) because max size of hashmap will be n as all elements are either 0 or 1
