// Time Complexity : O(n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :No

//Approach-> count all even occuring characters. All these will form a palindrome. 
//At the end of our iteration, if we our set is not emptyi.e there are odd characters, we can take one of these to add to our result.
//hence we return count*2(as we are counting each character which occurs atleast twice once) if set is empty else return count*2 + 1


class Solution {
    public int longestPalindrome(String s) {
    
        if(s==null || s.length()==0) 
        return 0;
     
    HashSet<Character> hs = new HashSet<Character>();
    int count = 0;
 
    for(int i = 0; i < s.length(); i++) {
        if(hs.contains(s.charAt(i))) {
            hs.remove(s.charAt(i));
            count++;
        } else {
            hs.add(s.charAt(i));
        }
    }
    if(!hs.isEmpty()) 
        return count * 2 + 1;
        
    else
        return count*2 ;
    
    
    }
    
}
