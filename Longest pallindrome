//edge case: if characters are same, then even or odd count doesn't matter
//time complexity: O(n)
//space complexity: O(1) 
//solved on leetcode
// brute force
// in pallindrome, all charcter counts are even , only one character count can be 1
class Solution {
    public int longestPalindrome(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        int length = 0;
        for(int i =0; i<s.length(); i++){
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }
        if(map.size() == 1) return s.length();
        for(char key : map.keySet()){
            // we get all possible even counts
            if(map.get(key) >= 2){ 
                if(map.get(key) % 2 == 0) length += map.get(key);// get all even counts
                else length += map.get(key)-1;// get even counts from odd counts
            }
        }
        // one odd count is also acceptable in pallindrome
        for(char key : map.keySet()){
            if(map.get(key)% 2 == 1){ // one odd 
                length += 1;
                break;
            }
        }
        return length;
    }
}
