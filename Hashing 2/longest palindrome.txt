// time complexity= O(string length)
//space complexity= constant
//solution ran on leet code
class Solution {
    public int longestPalindrome(String s) 
    {
        int count=0;
        boolean flag=true;
        HashMap<Character,Integer> h1=new HashMap<>();
        for(int i=0;i<s.length();i++)
        {
            if(h1.containsKey(s.charAt(i)))
            {
                int x=h1.get(s.charAt(i));
                h1.put(s.charAt(i),++x);
            }
            else
                h1.put(s.charAt(i),1);
        }
        for(int i=0;i<s.length();i++)
        {
            if(h1.containsKey(s.charAt(i)))
            {
                int x=h1.get(s.charAt(i));
                if(x%2!=0)
                {
                    count=count+x-1;
                    if(flag==true)
                    {
                     count++;flag=false;
                    }
                }
                else
                    count+=x;
                h1.remove(s.charAt(i));
            }
        }
        return count;
    }
}