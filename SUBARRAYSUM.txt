//Time Complexity : O(n) 
//Space Complexity : O(n) 
// Did this code successfully run on Leetcode : Yes



class Solution 
{
    public int subarraySum(int[] nums, int k) 
    {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        //map.put(0,1);
        int rsum =0;
        int cnt = 0;
        for(int i=0;i<nums.length;i++)
        {
            rsum = rsum + nums[i];
            if(rsum == k)
            {
                cnt++;
            }
            if(map.containsKey(rsum-k))
            {
                cnt = cnt + map.get(rsum-k);
            }
            if(map.containsKey(rsum))
            {
                map.put(rsum,map.get(rsum)+1);
            }else
            {
                map.put(rsum,1);
            }
            
        }
        
        return cnt;
    }
}