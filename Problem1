// Time Complexity : O(n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach
class Solution {
    public int subarraySum(int[] nums, int k) {
        if(nums == null || nums.length == 0) return 0; //base case, empty array
        Map<Integer, Integer> map = new HashMap<>();
        int total = 0; //stores total number of continuous subarrays whose sum equals to the target
        int sum = 0; //local sum
        for(int i=0;i<nums.length;i++) {
            sum+=nums[i]; //keep adding elements to sum
            if(sum == k) total++; //if sum of continuous subarray equals target, increment total
            
            if(map.containsKey(sum-k)) {
                total += (map.get(sum-k));
            }
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        
        return total;
    }
}
