    public int longestPalindrome(String s) {
        // edge case
        if(s == null || s.length() == 0){
               return 0; 
        }
        
        // Logic
        int count = 0;
        HashSet <Character> set = new HashSet<>();
        for(int i = 0; i < s.length(); i++){
            char currChar = s.charAt(i);
            if(set.contains(currChar)){
                count = count+2;
                set.remove(currChar);
            }else{
                set.add(currChar);
            }
        }
        if(set.size() > 0){
            count++;
        }
        return count;
    }
    // Time Complexity : O (N) because it will iterate through entire array 
    // Space Complexity : O(1) because we will be having constant value of characters regardless or upper case or lower case that is 26 or 52 respectively
